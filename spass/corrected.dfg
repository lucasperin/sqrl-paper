begin_problem(sqrl).

list_of_descriptions.
name({* Corrected version *}).
author({*Claudio Dettoni*}).
status(unsatisfiable).
description({**}).
end_of_list.
 
list_of_symbols.
functions[
(user,0),
(attacker,0),
(asp,0),
(scanner,1),
(request,1),
(code,1),
(sent,3),
(sign,2),
(cookie,1)
].
predicates[
(M, 1),
(Knows, 2)
].
end_of_list.
 
list_of_formulae(axioms).

% Any party knows any message sent to them
formula(forall([xa,xb,xm], 
	implies(
		M(sent(xa,xb,xm)),
		Knows(xb, xm)
	))
).
 
formula(M(sent(user,asp,request(user)))).

formula(forall([xa,xreq], 
	implies(
		M(sent(xa,asp,xreq)),
		M(sent(asp,xa,code(xreq)))
	))
).

formula(forall([xa,xcode], 
	implies(
		M(sent(xa,user,xcode)),
		M(sent(user,scanner(user),xcode))
	))
).

formula(forall([xu,xcode], 
	implies(
		M(sent(xu,scanner(xu),xcode)),
		M(sent(scanner(xu),asp,sign(xcode, scanner(xu))))
	))
).

formula(forall([x, xscanneruser,xrequestuser], 
	implies(
		M(sent(x,asp,sign(code(request(xrequestuser)), scanner(xscanneruser)))),
		M(sent(asp,x,cookie(xscanneruser)))
	))
).

formula(forall([x, xu,xcookie], 
	implies(
		M(sent(x,scanner(xu),xcookie)),
		M(sent(scanner(xu),xu,xcookie))
	))
).

% The attacker can trick users to read codes that they know
formula(forall([xcode, xu], 
	implies(
		Knows(attacker, xcode),
		M(sent(attacker, xu, xcode))
	))
).

% The attacker can access the website
formula(M(sent(attacker,asp,request(attacker)))).

end_of_list.
 
list_of_formulae(conjectures).

formula(Knows(user,cookie(user))).

end_of_list.
 
end_problem. 
